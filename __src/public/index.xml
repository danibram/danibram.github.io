<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Opensource projects</title>
    <link>http://blog.dbr.io/</link>
    <description>Recent content on Opensource projects</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Feb 2016 18:16:26 +0100</lastBuildDate>
    
	<atom:link href="http://blog.dbr.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>First Post</title>
      <link>http://blog.dbr.io/post/firsts-steps/</link>
      <pubDate>Fri, 19 Feb 2016 18:16:26 +0100</pubDate>
      
      <guid>http://blog.dbr.io/post/firsts-steps/</guid>
      <description></description>
    </item>
    
    <item>
      <title>time tracker cli</title>
      <link>http://blog.dbr.io/project/time-tracker-cli/</link>
      <pubDate>Sun, 07 Feb 2016 20:13:19 +0100</pubDate>
      
      <guid>http://blog.dbr.io/project/time-tracker-cli/</guid>
      <description>Installation npm install -g time-tracker-cli  or
yarn global add time-tracker-cli  Now you can start to call timercommand
Usage 
└┘#! timer Usage: timer [options] [command] Commands: start|s &amp;lt;task_key&amp;gt; [description] Start task with a description. pause|p &amp;lt;task_key&amp;gt; Pause task unpause|up &amp;lt;task_key&amp;gt; Unpause task finish|f &amp;lt;task_key&amp;gt; [description] Stop task, you can add a description description|d &amp;lt;task_key&amp;gt; &amp;lt;descriptionText...&amp;gt; Add description to your task. add &amp;lt;task_key&amp;gt; &amp;lt;stringTime&amp;gt; Adds time to a task.</description>
    </item>
    
    <item>
      <title>mocker data generator</title>
      <link>http://blog.dbr.io/changelog/mocker-data-generator/</link>
      <pubDate>Tue, 29 Dec 2015 17:37:56 +0100</pubDate>
      
      <guid>http://blog.dbr.io/changelog/mocker-data-generator/</guid>
      <description>Change Log All notable changes to this project will be documented in this file. See standard-version for commit guidelines.

2.1.0 (2017-05-27) Features  Added a way to obtain actual array while the generation, @zamnuts suggestion (2588a34) Added length on the array function generator, thanks @zamnuts (1f17519) added PR #16 Add parameter to hasMany generator, thanks @justinbarry (71d947f)  
2.0.2 (2017-05-24) Bug Fixes  browserify: fix browserify builds changing casual to browserify-casual (de93262)</description>
    </item>
    
    <item>
      <title>mocker data generator</title>
      <link>http://blog.dbr.io/project/mocker-data-generator/</link>
      <pubDate>Tue, 29 Dec 2015 17:37:56 +0100</pubDate>
      
      <guid>http://blog.dbr.io/project/mocker-data-generator/</guid>
      <description>A simplified way to generate massive mock data based on a schema, using the awesome fake/random data generators like (FakerJs, ChanceJs, CasualJs and RandExpJs), all in one tool to generate your fake data for testing.
Now the library has been migrated 100% to typescript typing are included.
Getting started Install the module with: npm install mocker-data-generator
Import it
var mocker = require(&#39;mocker-data-generator&#39;).default (vainilla way) or import mocker from &#39;mocker-data-generator&#39; (ES6 or Typescript way)  Then use it:</description>
    </item>
    
    <item>
      <title>adyen client</title>
      <link>http://blog.dbr.io/project/adyen-client/</link>
      <pubDate>Thu, 29 Oct 2015 20:18:35 +0100</pubDate>
      
      <guid>http://blog.dbr.io/project/adyen-client/</guid>
      <description>Getting started Install the module with: npm install adyen-client
var adyenClient = require(&#39;adyen-client&#39;) var aClient = adyenClient({ frontKey: &#39;YOUR FRONT END KEY&#39;, //Only used for the initCCForm merchantAccount: &#39;YOUR MERCHANT ACCOUNT&#39; username: &#39;YOUR USERNAME&#39;, password: &#39;YOUR PASSWORD&#39;, development: true }); aClient .getRecurringData({ &amp;quot;shopperReference&amp;quot;: &amp;quot;SimonHopper1&amp;quot;, &amp;quot;recurring&amp;quot;: { &amp;quot;contract&amp;quot;: &amp;quot;RECURRING&amp;quot; } }).then(function (response) { console.log(util.inspect(response, false, 20, true)); }) .fail(function (error) { console.log(util.inspect(error, false, 20, true)); });  Documentation First of all you need to initialize the client passing your merchant account, username, password and front end key (only if you need to do the frontend initialization).</description>
    </item>
    
    <item>
      <title>flat ui syntax</title>
      <link>http://blog.dbr.io/project/flat-ui-syntax/</link>
      <pubDate>Tue, 29 Sep 2015 20:33:43 +0100</pubDate>
      
      <guid>http://blog.dbr.io/project/flat-ui-syntax/</guid>
      <description>An Atom ui syntax
 The font used in the screenshot is Source Code Pro.
 </description>
    </item>
    
    <item>
      <title>trustly client</title>
      <link>http://blog.dbr.io/project/trustly-client/</link>
      <pubDate>Fri, 05 Jun 2015 20:24:40 +0100</pubDate>
      
      <guid>http://blog.dbr.io/project/trustly-client/</guid>
      <description>Node.js client for trusty integrations.
Getting started Install the module with: npm install trustly-client
var client = require(&#39;trustly-client&#39;); var tClientKP = client(configuration); //Promise style tClientKP.init() .then(function () { return tClientKP.deposit({ NotificationURL: &#39;http://127.0.0.1:4343/notification&#39;, EndUserID: &#39;john.doe@example.com&#39;, MessageID: &#39;111112111221&#39;, Locale: &#39;es_ES&#39;, Amount: &#39;1.00&#39;, Currency: &#39;EUR&#39;, SuccessURL: &#39;http://127.0.0.1:4343/success&#39;, FailURL: &#39;http://127.0.0.1:4343/fail&#39;, HoldNotifications: 1 }); }) .then(function (response) { console.log(util.inspect(response, false, 20, true)); }) .fail(function (error) { console.log(util.inspect(error, false, 20, true)); }); //Callback style tClientKP.init(function(){ tClientKP.</description>
    </item>
    
    <item>
      <title>translator helper dustjs</title>
      <link>http://blog.dbr.io/project/translator-helper-dustjs/</link>
      <pubDate>Tue, 17 Mar 2015 20:35:49 +0100</pubDate>
      
      <guid>http://blog.dbr.io/project/translator-helper-dustjs/</guid>
      <description>A little helper for dustjs to load i18n translations dynamically, with variables, based on https://github.com/mikesparr/Kraken_Example_i18n_Helper. Feel free to comment, copy or burn this code =P
New version supporting kraken 2. Check the 1.x for kraken 1 and 2.x for kraken 2. Getting Started Install the module with: npm install translator-helper-dustjs
Its important to add a global variable to pass the kraken config to the module, i put in my index.</description>
    </item>
    
    <item>
      <title>bumblebee object transformation</title>
      <link>http://blog.dbr.io/project/bumblebee-object-transformation/</link>
      <pubDate>Sun, 30 Nov 2014 20:30:04 +0100</pubDate>
      
      <guid>http://blog.dbr.io/project/bumblebee-object-transformation/</guid>
      <description>Object transformation tool inspired on mongoose models. The basic idea is to contruct a result object, form a model and a reference object (and also you can pass an object as base).
Getting Started Install the module with: npm install bumblebee
var bumblebee = require(&#39;bumblebee-object-transformation&#39;); bumblebee(initialObject, referenceObject, model, function(err, result){ console.log(result); //Your code.... });  Documentation Basically you should use as model the final object, and field by field you can speficy:</description>
    </item>
    
    <item>
      <title>object cleaner</title>
      <link>http://blog.dbr.io/project/object-cleaner/</link>
      <pubDate>Sun, 30 Nov 2014 20:27:44 +0100</pubDate>
      
      <guid>http://blog.dbr.io/project/object-cleaner/</guid>
      <description>A little function to clean dirty Objects, find any array with lenght one and and put his content without array.
Getting Started Install the module with: npm install object-cleaner
var objCleaner = new require(&#39;object-cleaner&#39;); objCleaner(Object_to_clean); // Object_cleaned  Examples var test = [{ property1: &#39;&#39;, property2: &#39;&#39; }]; var result = objCleaner(test); var result = { property1: &#39;&#39;, property2: &#39;&#39; };  License Copyright &amp;copy; 2014 Daniel Biedma Ramos Licensed under the MIT license.</description>
    </item>
    
  </channel>
</rss>